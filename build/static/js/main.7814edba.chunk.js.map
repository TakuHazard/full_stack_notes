{"version":3,"sources":["components/Note.js","services/notes.js","services/login.js","components/LoginForm.js","components/Toggable.js","components/NoteForm.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","token","getAll","request","axios","get","nonExisting","id","date","then","response","data","concat","create","newObject","a","config","headers","Authorization","post","update","put","setToken","newToken","login","credentials","LoginForm","handleSubmit","handleUsernameChange","handlePasswordChange","username","password","onSubmit","value","onChange","type","Togglable","React","forwardRef","props","ref","useState","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","useImperativeHandle","style","buttonLabel","children","displayName","NoteForm","createNote","newNote","setNewNote","event","preventDefault","target","Notification","message","Footer","color","fontStyle","fontSize","App","notes","setNotes","showAll","setShowAll","errorMessage","setErrorMessage","setUsername","setPassword","user","setUser","loginVisible","setLoginVisible","noteFormRef","useRef","useEffect","noteService","initialNotes","loggedUserJSON","window","localStorage","getItem","JSON","parse","notesToShow","filter","addNote","noteObject","current","returnedNote","handleLogin","console","log","loginService","setItem","stringify","setTimeout","loginForm","Toggable","map","key","find","n","changedNote","catch","error","toggleImportanceOf","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7814edba.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n    const label = note.important ? 'make not important' : 'make important'\n\n    return (\n        <li className = 'note'>\n            {note.content}\n            <button onClick = {toggleImportance}>{label}</button>\n        </li>\n    )\n}\n\nexport default Note","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\n\nlet token = null\nconst setToken = newToken => {\n  token = `bearer ${newToken}`\n}\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  const nonExisting ={\n      id:10000,\n      content:'This note is not saved to server',\n      date: '2019-05-30T17:30:31.098Z',\n      important: true,\n  }\n  return request.then(response => response.data.concat(nonExisting))\n}\n\nconst create = async newObject => {\n  const config = {\n    headers : {Authorization : token}\n  }\n  \n  const response = await axios.post(baseUrl, newObject, config)\n  return response.data\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default {getAll,create,update, setToken}","import axios from 'axios'\nconst baseUrl = '/api/login'\n\nconst login = async credentials => {\n    const response = await axios.post(baseUrl, credentials)\n    return response.data\n}\n\nexport default {login}","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst LoginForm = ({\n    handleSubmit,\n    handleUsernameChange,\n    handlePasswordChange,\n    username,\n    password\n}) => {\n    return (\n        <div>\n            <h2>Login</h2>\n            <form onSubmit = {handleSubmit}>\n                <div>\n                    username\n                    <input\n                        id = 'username'\n                        value = {username}\n                        onChange = {handleUsernameChange}\n                    />\n                </div>\n                <div>\n                    password\n                    <input\n                        id = 'password'\n                        type = \"password\"\n                        value = {password}\n                        onChange = {handlePasswordChange}\n                    />\n                </div>\n                <button id = 'login-button' type =\"submit\">login</button>\n            </form>\n        </div>\n    )\n}\n\nLoginForm.propTypes = {\n    handleSubmit : PropTypes.func.isRequired,\n    handleUsernameChange : PropTypes.func.isRequired,\n    handlePasswordChange : PropTypes.func.isRequired,\n    username : PropTypes.string.isRequired,\n    password : PropTypes.string.isRequired\n\n}\n\nexport default LoginForm","import React, { useState, useImperativeHandle } from 'react'\nimport PropTypes from 'prop-types'\n\nconst Togglable = React.forwardRef((props, ref) => {\n    const [visible, setVisible] = useState(false)\n\n    const hideWhenVisible = { display: visible ? 'none' : '' }\n    const showWhenVisible = { display: visible ? '' : 'none' }\n\n    const toggleVisibility = () => {\n        setVisible(!visible)\n    }\n\n    useImperativeHandle(ref, () => {\n        return {\n            toggleVisibility\n        }\n    })\n\n    return (\n        <div>\n            <div style={hideWhenVisible}>\n                <button onClick={toggleVisibility}>{props.buttonLabel}</button>\n            </div>\n            <div style={showWhenVisible} className = \"togglableContent\">\n                {props.children}\n                <button onClick={toggleVisibility}>cancel</button>\n            </div>\n        </div>\n    )\n})\n\nTogglable.displayName = 'Togglable'\nTogglable.propTypes = {\n    buttonLabel : PropTypes.string.isRequired\n}\n\nexport default Togglable","import React , { useState } from 'react'\n\nconst NoteForm = ({ createNote }) => {\n    const [newNote, setNewNote] = useState('')\n\n    const handleChange = (event) => {\n        setNewNote(event.target.value)\n    }\n\n    const addNote = (event) => {\n        event.preventDefault()\n        createNote({\n            content : newNote,\n            important : false\n        })\n\n        setNewNote('')\n    }\n\n    return (\n        <div className = \"formDiv\">\n            <h2>Create a new note</h2>\n\n            <form onSubmit={addNote}>\n                <input\n                    id = \"note-form\"\n                    value={newNote}\n                    onChange={handleChange}\n                />\n                <button type=\"submit\">save</button>\n            </form>\n        </div>\n    )\n}\n\nexport default NoteForm","import React, {useState, useEffect, useRef} from 'react'\nimport axios from 'axios'\nimport Note from './components/Note'\nimport noteService from './services/notes'\nimport loginService from './services/login'\nimport LoginForm from './components/LoginForm'\nimport Toggable from './components/Toggable'\nimport NoteForm from './components/NoteForm'\n\nconst Notification = ({message}) =>{\n  if(message === null){\n    return null\n  }\n\n  return(\n    <div className = \"error\">\n      {message}\n    </div>\n  )\n}\n\nconst Footer = ()=>{\n  const footerStyle = {\n    color : 'green',\n    fontStyle : 'italic',\n    fontSize :16\n  }\n\n  return (\n    <div style = {footerStyle}>\n      <br />\n      <em> Note app, Taku 2020</em>\n    </div>\n  )\n}\n\nconst App = () =>{\n  const [notes,setNotes] = useState([])\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [username,setUsername] = useState('')\n  const [password,setPassword] = useState('')\n  const[user,setUser] = useState(null)\n  const [loginVisible,setLoginVisible] = useState(false)\n\n  const noteFormRef = useRef()\n\n  useEffect(() =>{\n    noteService\n        .getAll()\n        .then(initialNotes =>{\n          setNotes(initialNotes)\n        })\n  },[])\n  \n  useEffect(()=> {\n    const loggedUserJSON = window.localStorage.getItem('loggedNoteappUser')\n    if(loggedUserJSON){\n      const user = JSON.parse(loggedUserJSON)\n      setUser(user)\n      noteService.setToken(user.token)\n    }\n  },[])\n  const notesToShow = showAll ? notes : notes.filter(note => note.important)\n\n  const addNote = (noteObject) =>{\n    noteFormRef.current.toggleVisibility()\n    noteService\n        .create(noteObject)\n        .then(returnedNote =>{\n          setNotes(notes.concat(returnedNote))\n        })\n  }\n  \n\n  const toggleImportanceOf = (id) =>{\n    const url = `http://localhost:3001/notes/${id}`\n    const note = notes.find(n => n.id === id)\n    const changedNote = {...note, important : !note.important}\n\n   noteService\n       .update(id,changedNote)\n        .then(returnedNote =>{\n          setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n        })\n        .catch(error=>{\n          setErrorMessage(\n            `Note '${note.content}' was already removed from server`\n          )\n          setTimeout(()=>{\n            setErrorMessage(null)\n          },5000)\n          setNotes(notes.filter(n => n.id !== id))\n        })\n  }\n\n  const handleLogin = async (event) => {\n    event.preventDefault()\n    console.log('loggin in with', username, password)\n    try {\n      const user = await loginService.login({username, password})\n      console.log('log in successful. User is ', user)\n      window.localStorage.setItem('loggedNoteappUser', JSON.stringify(user))\n      noteService.setToken(user.token)\n      setUser(user)\n      setUsername('')\n      setPassword('')\n    } catch (exception) {\n      setErrorMessage('Wrong Credentials')\n      setTimeout(()=> {\n        setErrorMessage(null)\n      },5000)\n    }\n  }\n\n  const loginForm = () => {\n\n    const hideWhenVisible = {display : loginVisible ? 'none' : ''}\n    const showWhenVisible = {display : loginVisible ? '' : 'none'}\n\n    return (\n      <div>\n        <div style = {hideWhenVisible}>\n          <button onClick = {() => setLoginVisible(true)}>log in </button>\n        </div>\n        <div style = {showWhenVisible}>\n          <LoginForm \n            username = {username}\n            password = {password}\n            handleUsernameChange = {({target}) => setUsername(target.value)}\n            handlePasswordChange = {({target}) => setPassword(target.value)}\n            handleSubmit = {handleLogin}\n          />\n          <button onClick ={()=> setLoginVisible(false)}>cancel</button>\n        </div>\n      </div>\n    )\n  }\n\n  const noteForm = () => (\n    <Toggable buttonLabel = 'add new note' ref = {noteFormRef}>\n      <NoteForm createNote = {addNote}/>\n    </Toggable>\n\n  )\n\n  return(\n    <div>\n      <h1>Notes</h1>\n      <Notification message = {errorMessage}/>\n\n      {user === null ? \n        loginForm() : noteForm()\n      }\n      <div>\n        <button onClick ={()=> setShowAll(!showAll)}>show{showAll ?'important':'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note=> <\n                                Note key = {note.id} \n                                note = {note} \n                                toggleImportance ={()=> toggleImportanceOf(note.id)}\n                                />)}\n      </ul>\n      <Footer />\n    </div>\n  )\n\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\n// const promise = axios.get('http://localhost:3001/notes')\n// console.log(promise)\n\n// promise.then(response =>{\n//   console.log(response)\n// })\n\n\n  ReactDOM.render(\n    <App />,\n    document.getElementById('root')\n  )\n\n\n\n"],"sourceRoot":""}